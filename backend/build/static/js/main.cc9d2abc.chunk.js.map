{"version":3,"sources":["components/login.tsx","components/userListItem.tsx","components/messageBox.tsx","components/chat.tsx","App.tsx","index.tsx"],"names":["Login","loginWithRedirect","useAuth0","Card","elevation","className","CardContent","Avatar","aria-label","Typography","variant","Button","disableElevation","onClick","UserListItem","props","useState","anchorEl","setAnchorEl","handleClose","open","Boolean","id","undefined","style","display","justifyContent","Box","alt","email","src","photo","width","backgroundColor","status","newMessages","IconButton","e","event","currentTarget","Icon","color","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","p","blockUnblockContact","cursor","blocked","MessageBox","fromSender","dateTime","message","socket","socketIOClient","process","Chat","user","logout","users","setUsers","conversation","setConversation","contactIndex","setContactIndex","setMessage","messages","setMessages","setNewMessages","useEffect","userData","picture","emit","on","data","index","findIndex","n_user","forEach","foundUser","blacklistedUsers","indexOf","splice","messageData","length","sender","new_users_array","messagesEndRef","useRef","current","scrollTop","scrollHeight","sendMessage","preventDefault","trim","alert","to","socketId","Grid","container","direction","item","xs","map","contact","conversationId","setConversationMtd","returnTo","window","location","origin","ref","onSubmit","onChange","target","value","disabled","type","placeholder","endIcon","App","isAuthenticated","isLoading","CircularProgress","ReactDOM","render","domain","clientId","redirectUri","Container","document","getElementById"],"mappings":"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","file":"static/js/main.cc9d2abc.chunk.js","sourcesContent":["import {Card, CardContent, Avatar, Typography, Button} from '@material-ui/core';\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport './Login.css';\nconst Login=()=>{\n    const { loginWithRedirect } = useAuth0();\n    return (\n            <Card elevation={0} className=\"card\">\n                <CardContent className=\"card-content\">\n                    <Avatar aria-label=\"recipe\" className=\"appLogo\">IS</Avatar>\n                     <Typography variant=\"h4\" className=\"heading\">InstaChat</Typography>\n                     <Typography className=\"text\">Welcome to Instachat.<br/> Please login or Sign up below</Typography>\n                </CardContent>\n\n                <Button variant=\"contained\" className=\"loginBtn\" disableElevation onClick={loginWithRedirect}>\n                      LOGIN | SIGNUP\n                 </Button>\n            </Card>\n    )\n}\n\nexport default Login;","import {Avatar, Typography,Box,IconButton,Icon, Popover} from '@material-ui/core';\nimport {useState} from 'react';\n\ninterface UserProps{\n    photo: string,\n    email: string,\n    status: string,\n    onClick: any,\n    newMessages: number,\n    blocked: boolean,\n    blockUnblockContact:()=>void\n}\nconst UserListItem=(props: UserProps)=>{\n\n    const [anchorEl, setAnchorEl] = useState(null);\n\n    const handleClick = (event:any,contactEmail:string) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const callback=()=>{\n        props.blockUnblockContact();\n        handleClose();\n    }\n  const open = Boolean(anchorEl);\n  const id = open ? 'simple-popover' : undefined;\n    return (\n       <div style={{display:\"flex\",justifyContent:\"space-between\"}}>\n           <Box onClick={()=>{props.onClick()}} className=\"users-list-item\">\n           <Avatar alt={props.email} src={props.photo}/>\n           <Box style={{width:\"90%\"}}>\n                <Typography className=\"user-name\">{props.email}</Typography>\n                <Box className=\"status\">\n                    <Box className=\"status-indicator\">\n                        <Box className=\"indicator\" style={{backgroundColor: props.status === \"online\" ? \"rgb(39, 206, 39)\": \"#f17438\"}}/>\n                        <Typography className=\"indicator-text\">{props.status}</Typography>\n                    </Box>\n                    {props.newMessages > 0 ? <Box className=\"new-message-indicator\">{props.newMessages}</Box> : null}\n                </Box>\n           </Box>\n       </Box>\n\n\n        <IconButton onClick={(e)=>{handleClick(e,props.email)}}>\n            <Icon style={{color:\"white\"}}>\n                more_vert \n            </Icon>\n        </IconButton>\n\n        <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n      >\n          <Box p={2} onClick={callback} style={{cursor: \"pointer\"}}>\n            <Typography>{props.blocked ? \"Unblock\": \"Block\"}</Typography>\n          </Box>\n      </Popover>\n       </div>\n    )\n}\n\nexport default UserListItem;","import {Box,Typography} from '@material-ui/core';\n\n\ninterface MessageProps{\n    message: string,\n    dateTime: string,\n    fromSender: boolean\n}\nconst MessageBox=(props: MessageProps)=>{\n    return (\n        <Box className={props.fromSender ? \"from-sender\" : \"from-recipient\"}>\n           <Box className={props.fromSender ? \"from-sender-box\" : \"from-recipient-box\"}>\n            <Typography className=\"msg-date\">{props.dateTime}</Typography>\n            <Typography className=\"msg-text\">{props.message}</Typography>\n           </Box>\n        </Box>\n    );\n}\nexport default MessageBox;","import {Card,CardContent,Grid,Box, Avatar,Typography, Button, Icon} from '@material-ui/core';\n\nimport UserListItem from './userListItem';\nimport './Chat.css';\nimport MessageBox from './messageBox';\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { useEffect, useState, useRef } from 'react';\nimport socketIOClient from \"socket.io-client\";\n\nconst socketIoHost:string = process.env.REACT_APP_SOCKET_IO_END_POINT as string;\n\nvar socket = socketIOClient(socketIoHost);\n\ninterface Message{\n    message:string,\n    dateTime:string,\n    sender: string,\n    to: string\n}\ninterface User{\n    email: string;\n    picture: string;\n    status: string;\n    socketId: string;\n    newMessages: number;\n    blocked: false;\n    blacklistedUsers: any;\n}\nconst Chat=()=>{\n    const { user,logout } = useAuth0();\n    const [users,setUsers] = useState<User[]>([]);\n    const [conversation,setConversation] = useState(\"\");\n    const [contactIndex, setContactIndex] = useState<number>(-1);\n    const [message, setMessage] = useState<string>(\"\");\n    const [messages,setMessages] = useState<Message[]>([]);  \n    const [newMessages, setNewMessages] = useState<Message[]>([]);\n    \n    useEffect(()=>{\n     let userData = {\n         email: user?.email,\n         picture: user?.picture,\n         status: \"online\"\n     }\n     socket.emit(\"user_online\",userData);\n     socket.on('users',(data:any)=>{\n        let index = data.findIndex((n_user:any) => n_user.email === user?.email);\n        \n        data.forEach((n_user:any) => {\n             let foundUser=data[index].blacklistedUsers.indexOf(n_user.email);\n            if(foundUser > -1){\n                n_user.blocked = true;\n            }else{\n                n_user.blocked = false;\n            }\n        });\n        data.splice(index,1);\n        setUsers(data);\n     })\n\n     socket.on('message_received',messageData=>{\n        setNewMessages(messageData); \n     })\n\n    },[])\n\n    useEffect(()=>{\n\n        \n        if(newMessages.length === 0){\n           setMessages(newMessages);\n        }else if(conversation.indexOf(newMessages[newMessages.length-1].sender) > -1){\n           setMessages(newMessages);\n        }else{\n            //alert user of new message\n            let sender = newMessages[newMessages.length-1].sender;\n            let index = users.findIndex((n_user:any) => n_user.email === sender);\n            let new_users_array = [...users];\n            new_users_array[index].newMessages +=1;\n            setUsers(new_users_array);\n        }\n    },[newMessages])\n\n\n\n    const messagesEndRef = useRef<null | HTMLDivElement>(null);\n\n    const scrollToBottom = () => {\n        messagesEndRef!.current!.scrollTop = messagesEndRef!.current!.scrollHeight;\n    }\n\n    useEffect(scrollToBottom, [messages]);\n\n    const logUserOut=()=>{\n        socket.emit('logout',user);\n        logout({ returnTo: window.location.origin });\n    }\n\n    const setConversationMtd=(index: number)=>{\n        setContactIndex(index);\n        let conversationId = users[index].email+\":\"+user?.email;\n        setConversation(conversationId);\n        socket.emit('get_conversations',conversationId);\n\n           //reset new messages\n           let new_users_array = [...users];\n           new_users_array[index].newMessages = 0;\n          setUsers(new_users_array);\n    }\n\n    const sendMessage=(e:any)=>{\n\n        e.preventDefault();\n        if(message.trim().length < 1){\n            return;\n        }\n        if(users[contactIndex].blocked){\n            alert('You blocked this contact');\n            return;\n        }\n        let messageData = {\n            message: message,\n            sender: user?.email,\n            to: users[contactIndex].socketId,\n            conversation: conversation\n        };\n        setMessage(\"\");\n        socket.emit('send_message',messageData);\n    }\n\n    const blockUnblockContact =(email:string)=>{\n       socket.emit('block_user',{user: user?.email,contact:email})\n    }\n\n    return (\n        <Card elevation={0} className=\"chat-box\">\n            <CardContent className=\"chat-box-content\">\n                <Grid container direction=\"row\" className=\"grid-container\">\n                    <Grid item xs={3} className=\"left-pane\"> \n                      <Box className=\"current-user\">\n                          <Avatar src={user?.picture}/>\n                          <Typography className=\"user-name\">{user?.email}</Typography>\n                      </Box>\n\n                      <Box className=\"users-title\">\n                            <Typography>Users</Typography>\n                      </Box>\n                      <Box className=\"users-list\">\n                         {users.map((contact,index)=>(\n                             <div key={index}>\n                              {contact.status === 'online' && contact.blacklistedUsers.indexOf(user?.email) < 0 ? \n                              <UserListItem blockUnblockContact={()=>{blockUnblockContact(contact.email)}} blocked={contact.blocked} onClick={()=>{setConversationMtd(index)}} key={index} email={contact.email} photo={contact.picture} status={contact.status} newMessages={contact.newMessages}/>\n                              : null}\n                             </div>\n                         ))}\n                      </Box>\n                    </Grid>\n                    <Grid item xs={9} className=\"right-pane\">\n                        <Box className=\"right-pane-top-bar\">\n                            {conversation === \"\" ? <Box></Box>  : <Box className=\"top-bar-title\">\n                                <Avatar className=\"avatar\" src={users[contactIndex].picture} alt=\"adolfokrah@gmail.com\"/>\n                                <Typography>{users[contactIndex].email}</Typography>\n                            </Box>}\n                            <Button onClick={logUserOut} variant=\"contained\" style={{backgroundColor:\"#4ed6f0\", color:\"white\"}} disableElevation>LOGOUT</Button>\n                        </Box>\n                        <div className=\"chat-body\" ref={messagesEndRef}>\n                            {conversation === \"\" ? <Typography>Please select a contact to chat with</Typography> :\n                             <>\n                                {messages.map((message,index)=>(\n                                 <MessageBox key={index} message={message.message} dateTime={message.dateTime} fromSender={message.sender === user?.email ? true : false}/>\n                                ))}\n                             </>\n                            }\n                        </div>\n                        <form className=\"message-box\" onSubmit={sendMessage}>\n                            <input onChange={(e)=>setMessage(e.target.value)} value={message} disabled={conversation === '' ? true : false} className=\"text-input\" type=\"text\" placeholder=\"Type your message\"/>\n                            <Button\n                                    disableElevation\n                                    className=\"sendBtn\"\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    endIcon={<Icon>send</Icon>}\n                                    disabled={conversation === '' ? true : false}\n                                    onClick={sendMessage}\n                            >\n                             SEND\n                            </Button>\n                        </form>\n                    </Grid>\n                </Grid>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default Chat;","import Login from './components/login';\nimport Chat from './components/chat';\nimport {CircularProgress} from '@material-ui/core';\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\n\nconst  App=()=>{\n  const { isAuthenticated, isLoading } = useAuth0();\n  if(isLoading){\n    return (\n      <div className=\"app\">\n        <CircularProgress />\n      </div>\n    )\n  }\n  return (\n    <div className=\"App\">\n        {isAuthenticated ? <Chat /> : <Login/>}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Container} from '@material-ui/core';\nimport { Auth0Provider } from \"@auth0/auth0-react\";\n\nconst domain:string = process.env.REACT_APP_AUTH0_DOMAIN as string;\nconst clientId:string = process.env.REACT_APP_AUTH0_CLIENT_ID as string;\n\nReactDOM.render(\n  <Auth0Provider\n    domain={domain}\n    clientId={clientId}\n    redirectUri={window.location.origin}\n  >\n    <Container className=\"app-container\">\n      <App />\n    </Container>\n  </Auth0Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}